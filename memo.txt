メモ
むらじゅんさん
  IE8対応はどうしてますか？
  (JQueryのバージョンで苦労している)

    なるべくシンプルに作ってる（UIゴリゴリはさけている）
    リッチなものはさける

  権限まわりのGemは何か使ってますか？
    cancan
      わりとライトに作られている（柔軟性が高い？）
      Rails4には対応していない
    pundit
      柔軟性が、、、

    複雑な権限は本当に必要な機能なのか？を相談した方が良い
    できるけど時間かかりますよ
    Gemならruby tool boxで探すのも良い

  ファイルシステム構築(バージョン管理含む)はどう作った方が良い？
    carrierwave
    paperclip

    ファイルとして保存
    ファイル排他制御はパス名で行うと良いのでは？

  おまけ
    erdというgemの紹介

村瀬さん
  JavaScriptの使い方
    シンプルなときはremote: trueを使う
    返すjsはシンプルなものにし、javaScript側(assets以下に配置)で書く
      app/assetsは自分たちのコード
      vendor/assetsはプラグイン的なコード
    ajaxコールのときはprefixをつけている _xxx, ajax_xxxなど

  テストコード
    10行程度なら特に問題ないのでは？
    設定はbeforeに移すくらい

  コードレビューの指針はありますか？
    いいとこも書くようにする
    いいコードへの共通認識を持つ
    頻繁に実施すると認識を合わせやすい
    でも規約化はできていない（難しい）

明石さん
  コントローラーのディレクトリ設計
    adminでわけることはある
      application_controller.rbを置く
    userレベルでわけることはしてない
    namespace
      同じ名前のモデルがあるとロード順によってコンフリクトする場合がある
      かぶらない名前にした方がよい

  dbパスワードなどはどこに保存する？
    リポジトリに保存(性善説)

寺田さん
  プロダクトの仕様はどうやって決めるのか
  プロダクトの仕様をどこまで決めるのか
  チームの中で開発の分担方法はどうやって決めるのか
  スケジュールの見込をどのようにたてるのか

    長期で続くビジネスモデルであることが前提
    最長3ヶ月でMVPを作る
    基本は1人で作っている
    チーム内共有方法
      紹介する場を設けている
    質問相談は随時
    入社時のKPTで文化を吸収した
      Tryは具体的に達成できるものにする（xxに気をつけるなどはダメ）
    バックログ
      Pivotalで管理している
      独自ツールも作成している
        Pivotalの見積もり機能、ベロシティ機能はいらないと思っている
      この日までになくても良いものは何か？という聞き方をする
    
荻
  Modelにhas_manyの関係を持たせるとき、関連づけにはidを使いますか？
  それとも自前の管理Noを使いますか？

    idを使う

  大量のテーブル、カラムが存在するときの名前の付け方はどうしてますか？

    なるべく英語
    生産性に影響が出るならローマ字もあり
    SAPなら4文字キーなどを使っても良いのでは？

  データ更新の排他処理とブラウザ戻るボタン対応はどうしてます？

    やるなら楽観的ロック
    なるべくロック使わなくても良いように話を持っていく(本当に必要ですか？)

  アップロードファイルはどう保存しますか？

    ActiveRecordではなくファイルとして保存している

  検索用項目が沢山ある場合、GETのパラメータが長くなる点について、何か工夫して>ますか？

    REST的にはGETだがやむを得ずPOSTを使う
    そもそも本当にそれだけパラメータが必要なのかを相談すべきでは？
    運用に問題ないならそのままでも良いのでは？

  テストコードのテストデータはどのように使っていますか？

    基本パターンを用意し、テストケース内で必要な部分を上書きする
    形で良いと思う

  本番稼働後にテーブル内容を変更した場合、アプリの入れ替えと
  db:migrateはいつ実行させますか？

    テーブルやカラムの追加ならdb:migrateは無停止で実行
    削除や変更ならアナウンスしてサービス停止して実行
    アプリはBlue Green Deploymentで切り替える
    DNS入れ替えが必要な場合は、
    段階的に切り替えるかHTTPサーバー側で新サーバーに飛ばすと良いのでは？

  旧システムからのデータ移行はどのように対応していますか？

    クリティカルな移行はあまりない(というかそんなリスクはなるべく負わない)
    あるタイミングでデータをrakeタスク等で移行し、
    そこからの差分を最終的に入れる

  Sessionデータはいつクリアした方が良いですか？

    仕様による
    そもそもSessionにあまり詰め込まないようにした方が良い(user識別程度)

  ワーク的な作業はSessionを使いますか？ワークテーブルは使いますか？

    ワークテーブルを使うのは見たことがある
    ショッピングカート的なものにするならワークではなく
    ユーザーが消すまでずっと残す

    そもそもSessionにあまり詰め込まないようにした方が良い

ゆさばなさん

  HTMLとJavascriptとの連携
    Hamlを使う
     data attributeにjsonを入れる
     デザイナーさんにもHamlを覚えてもらう方が良い（将来のことも考えて）
    erbとdata attributeでも良いかも

    Viewは複雑になりやすい
      なるべく複雑にしない
      ヘルパーに切り出す
      render partialを活用

    仕様をRailsの規約に合わせる方が良い
    Railsでできることをきちんと理解し、
    トレードオフをお客さんときちんと話をした方が良い

    Railsで既存システムのリプレースは難易度があがる

  トランザクションはモデルで書く(コントローラーの役割ではない)
    before_action,after_actionも活用すれば良い

  パフォーマンスはNewReric使った
  デモ用データはdb:seedで入れることが多い
    なるべく本番環境とstaging環境は同じデータを使った方が良い

西田さん
  Gemの採用基準はありますか？
    ruby tool box
    コミット状況（Issueがない場合は1年くらいコミットなくても大丈夫かも)
    Pull Request状況
    あまり古いとRailsバージョンに対応できなくなっている可能性がある

  JSframeworkは何か使ってますか？
    ほとんど使っていない
    あまりメリットがわからない(MVC+MVCになるのでRailsとの相性が気になる)
    リッチなUIを作りたい場合はメリットがありそう
    wri.peではBackbone.jsが使われているらしい

  テストコードのdescribeとcontextの使い分け
    ifがあればcontextで分ける

とちさん
  メソッド、ファイルはどの単位で分けますか？
    ファイル名で意味が分かるレベルでpartialに分けたりする
