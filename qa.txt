Railsアプリ開発時の疑問点

1. Modelにhas_manyの関係を持たせるとき、関連づけにはidを使いますか？
  それとも自前の管理Noを使いますか？

  Header : Content = 1 : N

  headers
  |id|header_no    |title          |
  +--+-------------+---------------+
  |1 |H20240720001 |title1         |
  +--+-------------+---------------+
  |2 |H20240720002 |title2         |
  +--+-------------+---------------+

  contents(idを使う場合)
  |id|header_id|vale|
  +--+---------+----+
  |1 |1        |aaaa|
  +--+---------+----+
  |2 |1        |bbbb|
  +--+---------+----+

  contents(自前の管理Noを使う場合)
  |id|header_no   |vale|
  +--+------------+----+
  |1 |H20240720001|aaaa|
  +--+------------+----+
  |2 |H20240720001|bbbb|
  +--+------------+----+

2.大量のカラムが存在する場合、カラム名はローマ字でつけています。
  (SAPと連携するような場合、日本語でも意味がわかりにくいので、
  英語にすると名前をつけるのもに時間がかかります。
  また英語名から直感的に内容を把握できず効率が悪いので)

  http://www.sapfan.jp/table.html

  皆さんならこういった場合どうしますか？

3.データ更新の排他処理とブラウザ戻るボタン対応はどうしてます？

  楽観的ロックを使いました。（先勝ちつまり後に更新しようとした方は更新できない）
  最初はやり方を知らず、表示時にupdated_atの値を画面に埋め込み、
  保存時に他で更新されたかどうかをチェックしてました。
  途中でlock_versionを埋め込む方法を知り切り替えました。

  http://rubyonrails.gachinko.org/3-2/lock_optimistically/

4. アップロードファイルはどう保存しますか？
　FTP等でディレクトリに格納? or ActiveRecord? or other?

5.検索用項目が沢山ある場合、GETのパラメータが長くなる点について、何か工夫してますか？

  WEBRickだと'Request-URI Too Large'エラーが発生します。

  サンプルアプリ：
  search_sample

6.テストコードのテストデータはどのように使っていますか？

  基本は同じでテストケースの分岐条件を変えたい場合など、
  全パターン分fixtureやfactoryで用意するのは大変です。
  しかもその場合、どのデータがどのテストで使われているか
  気にする必要が出てきたりして依存度が高くなってしまいます。
  
  私は最初traitを使ってある程度パターンを用意していたのですが、
  途中からは基本形のみ用意しておき、テストケース内で
  個別に修正する方法に変更しました。

  パターンA:
    factories/users.rb

    factory :user do
      name: 'Foo'
      email: 'foo@example.com'

      trait :address_kyoto do
        address: 'Kyoto'
      end

      trait :address_osaka do
        address: 'Osaka'
      end
    end

    テストコード：
    FactoryGirl.create(:user, :address_kyoto)

  パターンB:
    factories/users.rb

    factory :user do
      trait :base do
        name: 'Foo'
        email: 'foo@example.com'
        address: ''
      end
    end

    テストコード：
    user = FactoryGirl.build(:user, :base)
    user.address = 'Kyoto'
    user.save

7.本番稼働後にテーブル内容を変更した場合、アプリの入れ替えと
  db:migrateはいつ実行させますか？
  (幸いカラムの追加か、アプリの使っていないカラムのカラム名変更
  しか発生しなかったので、migrateは稼働中に実行しました)

8.旧システムからのデータ移行はどのように対応していますか？
（移行用データ作成、移行タイミング、移行手段など）

9.Sessionデータはいつクリアした方が良いですか？
  例えば検索フォームで検索し、検索フォームに戻ってきたときに
  先ほどの値を表示させたい場合に、値をSessionに格納していました。

10.あるModelのデータを編集する際、いきなりDBに反映してしまうのではなく、
  '確定'したら反映させたい場合がありました。
  つまり確定するまでは元のデータは更新させたくない場合です。
  （その人専用のワークで作業するイメージです） 

  全てのデータをSessionに持たせて画面を行き来させていたのですが、
  ショッピングカートのようにワークテーブルを使った方が良かったかなと
  思っています。
  (このためSessionが4KBをはるかに超えてしまいました)
  ワークで作業し、確定でデータを反映させるような場合は
  どんな方法が良いでしょうか？

11. 積集合など単純でないSQLを生成したい場合、
  どのように対応していますか？
  (Railsっぽい書き方がわからずSQL文直書きしました)

  前提：
    同じテーブルで親子関係のデータを保持している。
    親はparent='X'
    子は親のidをparent_idに保持。

  やりたいこと：
    検索にて次の条件の親を探したい
      親のcolumun_A='Foo' && column_B='Bar'
      かつ
      子にculumn_C='Baz'のレコードを持っている

  table_A
  |id|parent_id|columun_A|column_B|culumun_C|parent|
  +--+--------+---------+--------+---------+------+
  |1 |        |Foo      |Bar     |         |X     |
  +--+--------+---------+--------+---------+------+
  |2 |1       |Foo2     |Bar2    |Baz      |      |
  +--+--------+---------+--------+---------+------+
  |3 |1       |Foo3     |Bar3    |Baz2     |      |
  +--+--------+---------+--------+---------+------+
  |4 |1       |Foo4     |Bar4    |Baz3     |      |
  +--+--------+---------+--------+---------+------+
  |5 |        |Foo      |Bar     |         |X     |
  +--+--------+---------+--------+---------+------+
  |6 |5       |Foo2     |Bar2    |Baz1     |      |
  +--+--------+---------+--------+---------+------+
  |7 |5       |Foo3     |Bar3    |Baz2     |      |
  +--+--------+---------+--------+---------+------+
  |8 |5       |Foo4     |Bar4    |Baz3     |      |
  +--+--------+---------+--------+---------+------+

  コード：
  sql = <<SQL
  SELECT t1.* FROM 
  (
    SELECT * FROM table_A
    WHERE (column_A = 'Foo')
    AND (column_B = 'Bar') 
    AND (parent = 'X') 
  ) AS t1
  inner join
  (
    SELECT table_A.* FROM table_A
    INNER JOIN table_A
    ON table_A.id = table_A.parent_id
    AND parent != 'X'
    AND (column_C = 'Baz') 
  ) AS t2
  on
    t1.id = t2.id
  SQL

  ActiveRecord::Base.connection.execute(sql)
  or
  ActiveRecord::Base.connection.select(sql)

  補足：Arelを使えば直接SQL文を書かなくても良さそうと最近知りました。

12.同じView内で、新規登録と更新を同時に行う場合、
  どのような方法が良いでしょうか？

  例：

  User : Comment = 1 : N

  Userのedit画面でCommentも一緒にテーブル表示してあります。
  既存のCommentは編集し、JS等で空白行を追加した場合は新規Comment
  として登録させます。

  サンプルアプリ：
  create_update_sample

